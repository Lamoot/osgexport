#!BPY
# -*- python-indent: 4; coding: iso-8859-1; mode: python -*-
# Copyright (C) 2008 Cedric Pinson
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
# Authors:
#  Cedric Pinson <cedric.pinson@plopbyte.net>
#

"""
Name: 'osgexporter (.osg)'
Blender: 248
Group: 'Export'
Tip: 'Export armature/bone/action data to osg formats.'
"""

from twisted.trial import unittest, runner, reporter
from twisted.internet import reactor, defer
from twisted.python import failure
import twisted
import math

import sys
sys.path.insert(0, "@PROJECT_SOURCE_DIR@/blenderExporter/")

import Blender
from Blender import *
import bpy
import osg
from osg.osgobject import *
from osg.osgdata import *
from osg.osgbake import *


def close(a, b, threshold):
    for i in range(0,len(a)):
        if math.fabs(a[i] - b[i]) > threshold:
            return False
    return True

class Exporter(unittest.TestCase):
    # ------------------------------------------------------
    def setUp(self):
        osg.osgobject.Object.resetWriter()

    def tearDown(self):
        pass

    def testBakedIpo(self):
        sc = bpy.data.scenes["bakeipo"]
        bpy.data.scenes.active = sc
        baker = BakeIpoForObject(object = bpy.data.objects["Cube2Bake"], ipo = bpy.data.ipos["tobake"])
        ipo = baker.getBakedIpos()
        self.assertEquals(140, len(ipo[Ipo.OB_LOCX].bezierPoints))
        self.assertEquals(-8.3325824737548828, ipo[Ipo.OB_LOCX].bezierPoints[0].vec[1][1])
        self.assertEquals(5.5204887390136719, ipo[Ipo.OB_LOCX].bezierPoints[-1].vec[1][1])


    def testBakedIpoMaterial(self):
        sc = bpy.data.scenes["bakeipo"]
        bpy.data.scenes.active = sc
        baker = BakeIpoForMaterial(material = bpy.data.materials["mattobake"],
                                   ipo = bpy.data.ipos["mattobake"])
        ipo = baker.getBakedIpos()
        self.assertEquals(140, len(ipo[Ipo.MA_R].bezierPoints))
        self.assertEquals(140, len(ipo[Ipo.MA_ALPHA].bezierPoints))
        self.assertEquals(1, ipo[Ipo.MA_R].bezierPoints[0].vec[1][1])
        self.assertEquals(1, ipo[Ipo.MA_ALPHA].bezierPoints[0].vec[1][1])
        self.assertEquals(0, ipo[Ipo.MA_R].bezierPoints[-1].vec[1][1])
        self.assertEquals(0.5, ipo[Ipo.MA_ALPHA].bezierPoints[-1].vec[1][1])


def Run():
        loader = runner.TestLoader()
        loader.methodPrefix = "test"
        suite = loader.suiteFactory()
        suite.addTest(loader.loadClass(Exporter))
        return runner.TrialRunner(
                reporter.VerboseTextReporter,
                tracebackFormat='default',
                ).run(suite)

if __name__ == '__main__':
        if Run().wasSuccessful():
                sys.exit(0)
        else:
                sys.exit(1)
